package ru.gb.java2_stream200512_lesson_1;

import javax.swing.*;
import java.awt.*;

public class MainCanvas extends JPanel { // 6. Абстракция, на которой что-то происходит. На канве, на холсте будет происходить игра

    MainWindow gameController; // мВ выступает в качестве контроллера
    // котроллер ничего не знает о мячиках, не знает как должны рисоваться спрайты, но знает что должны,
    // т.е. когда приходит время все его подопечные обновляются как умеют
    // как надо рисоавться знают сами мячики
    // канва тоде не знает ни про мячи, ни про апдейты, ни про рисование
    long lastFrame;

    MainCanvas(MainWindow gameController) { //11 в метод добавляем информацию, что холст готов к перерисовки,
        // холст готовит тем кто будет на нем рисовать, что он готов
        this.gameController = gameController; // ссылка на объект скопируется в консруктор, который принимаем объекты класса МВ
        lastFrame = System.nanoTime();
        //setBackground(Color.BLUE); - промежуточное дейсвтие, делаем синий цвет канве
    }

    @Override
    protected void paintComponent(Graphics g) { //7. любой компонент в свинге может перерисовавываться по средсвам Пейнкомпонент
        // Рисование на панелях просиходит в нутри метода ПейнКомпонент
        // т.е. метод пейнкомпонент как-то сам переодически вызывается фреймворком СВИНГ и в этом методоте происходит все рисование
        super.paintComponent(g); // 8. переопределяем пайнткомпонет, чтобы канва рисовала все что мы ей дадим
        // и сообщать что отрисовались, но это будет занимать какое-то время
        long currentTime = System.nanoTime();
        float deltaTime = (currentTime - lastFrame) * 0.000000001f; //13 генереирует время, чтоб не было рывков на медленной машине,
        // считаем дельту времени, т.е. говорим что с последней отрисовки прошло столько-то времени (может быть разное)
        gameController.onDrawFrame(this, g, deltaTime);  //12 конва сообщает контроллеру, что готова перерисоваться
        // отрисоваться на ЭТОЙ канве, с помощью объекта графики
        lastFrame = currentTime;
        try {
            Thread.sleep(17); // 10. заставляем бесконечную перерисовку постпать 1000/60=17 милисекунд,
            // т.е. канва пайнткомпонент будет отрисовываться 60 раз в секунду
        } catch (InterruptedException e) { //ИДЕ подсказывает нам поставить исключение
            e.printStackTrace();
        }
        repaint(); // 9. бесконечно отрисовка, зациклили отрисовку, закончили метод и по новой (через вызов метода пайнкомпонент)
    }


    public int getLeft() { return 0; } // спрашиваем у конвы где левая граница

    public int getRight() { return getWidth() - 1; } // где правая граница

    public int getTop() { return 0; } // где верхняя граниыа

    public int getBottom() { return getHeight() - 1; } // где нижняя граница
}

